@page "/hackathonEntities"
@inject IRepository repository
@inject NavigationManager navigationManager

<h3>Hackathon Entities</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="mb-3">
    <a class="btn btn-primary" href="/hackathonEntities/create">Nuevo Hackathon Entity</a>
</div>

<GenericList MyList="HackathonEntities">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (HackathonEntities != null && HackathonEntities.Count > 0)
                {
                    @foreach (var entity in HackathonEntities)
                    {
                        <tr>
                            <td>@entity.Name</td>
                            <td>
                                <a href="/hackathonEntities/edit/@entity.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick="@(() => ConfirmDelete(entity))">Borrar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" class="text-center">No hay entidades disponibles.</td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<HackathonEntity> HackathonEntities { get; set; } = new List<HackathonEntity>();
    public string ErrorMessage { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var response = await repository.GetAsync<List<HackathonEntity>>("/api/hackathonEntities");
        if (!response.Error)
        {
            HackathonEntities = response.Response ?? new List<HackathonEntity>();
        }
        else
        {
            ErrorMessage = "Error al cargar las entidades.";
        }
    }

    private async Task ConfirmDelete(HackathonEntity entity)
    {
        var confirmed = await ShowConfirmationDialog($"¿Estás seguro de que deseas eliminar '{entity.Name}'?");
        if (confirmed)
        {
            await Delete(entity);
        }
    }

    private async Task Delete(HackathonEntity entity)
    {
        var response = await repository.DeleteAsync($"api/hackathonEntities/{entity.Id}"); // Removed type argument

        if (!response.Error)
        {
            await Load(); // Recargar lista después de eliminar
        }
        else
        {
            ErrorMessage = "Error al eliminar la entidad.";
        }
    }

    private async Task<bool> ShowConfirmationDialog(string message)
    {
        // Simulate confirmation dialog for deletion
        return await Task.FromResult(true);
    }
}
