@page "/organizations"
@inject IRepository repository
@inject NavigationManager navigationManager

<h3>Organizaciones</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="mb-3">
    <a class="btn btn-primary" href="/organizations/create">Nueva Organización</a>
</div>

<GenericList MyList="Organizations">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Organizations != null && Organizations.Count > 0)
                {
                    @foreach (var organization in Organizations)
                    {
                        <tr>
                            <td>@organization.Name</td>
                            <td>
                                <a href="/organizations/edit/@organization.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(organization))">Borrar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" class="text-center">No hay organizaciones disponibles.</td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Organization> Organizations { get; set; } = new List<Organization>();
    public string ErrorMessage { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var response = await repository.GetAsync<List<Organization>>("/api/organizations");
        if (!response.Error)
        {
            Organizations = response.Response ?? new List<Organization>();
        }
        else
        {
            ErrorMessage = "Error al cargar las organizaciones.";
        }
    }

    private async Task Delete(Organization organization)
    {
        var response = await repository.DeleteAsync($"api/organizations/{organization.Id}");

        if (!response.Error)
        {
            await Load(); // Recargar lista después de eliminar
        }
        else
        {
            ErrorMessage = "Error al eliminar la organización.";
        }
    }
}
